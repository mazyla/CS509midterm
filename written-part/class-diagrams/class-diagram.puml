@startuml Customer Account
class Account {
    -accountId: int
    -name: String
    -password: String
    +login(): Account
}

class CustomerAccount extends Account {
    -name: String
    -balance: double

    +deposit(amount: double): void
    +withdraw(amount: double): boolean
    +getBalance(): double

    +viewBalance(): double
}

class AdministratorAccount extends Account {
    +createAccount(customerInfo: String): CustomerAccount
    +deleteAccount(accountId: int): boolean
    +updateAccount(accountId: int, newDetails: String): boolean
    +searchAccount(accountId: int): CustomerAccount
}

class Transaction {
    -transactionId: int
    -date: Date
    -type: String
    -amount: double
    +execute(): boolean
}

class Withdraw extends Transaction {
    +execute(): boolean
}

class Deposit extends Transaction {
    +execute(): boolean
}

Account -- "*" Transaction : performs

class AccountService {
    +login(username: String, password: String): Account
    +createAccount(accountDetails: Account): Account
    +deleteAccount(accountId: int): void
    +updateAccount(accountId: int, account: Account): Account
    +findAccountById(accountId: int): Account
}

class TransactionService {
    +createTransaction(accountId: int, type: String, amount: double): Transaction
    +getTransactionsForAccount(accountId: int): List<Transaction>
}

class AccountRepository {
    +save(account: Account): Account
    +deleteById(accountId: int): void
    +findById(accountId: int): Optional<Account>
    +findAll(): List<Account>
}

class TransactionRepository {
    +save(transaction: Transaction): Transaction
    +findByAccountId(accountId: int): List<Transaction>
}

AccountService ..> AccountRepository : uses
TransactionService ..> TransactionRepository : uses

class ATM {
}

ATM ..> AccountService: uses
ATM ..> TransactionService: uses
@enduml
